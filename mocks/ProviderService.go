// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/odpf/guardian/domain"
	mock "github.com/stretchr/testify/mock"
)

// ProviderService is an autogenerated mock type for the ProviderService type
type ProviderService struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *ProviderService) Create(_a0 *domain.Provider) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Provider) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchResources provides a mock function with given fields:
func (_m *ProviderService) FetchResources() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields:
func (_m *ProviderService) Find() ([]*domain.Provider, error) {
	ret := _m.Called()

	var r0 []*domain.Provider
	if rf, ok := ret.Get(0).(func() []*domain.Provider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Provider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *ProviderService) GetByID(id string) (*domain.Provider, error) {
	ret := _m.Called(id)

	var r0 *domain.Provider
	if rf, ok := ret.Get(0).(func(string) *domain.Provider); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Provider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: pType, urn
func (_m *ProviderService) GetOne(pType string, urn string) (*domain.Provider, error) {
	ret := _m.Called(pType, urn)

	var r0 *domain.Provider
	if rf, ok := ret.Get(0).(func(string, string) *domain.Provider); ok {
		r0 = rf(pType, urn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Provider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(pType, urn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoles provides a mock function with given fields: id, resourceType
func (_m *ProviderService) GetRoles(id string, resourceType string) ([]*domain.Role, error) {
	ret := _m.Called(id, resourceType)

	var r0 []*domain.Role
	if rf, ok := ret.Get(0).(func(string, string) []*domain.Role); ok {
		r0 = rf(id, resourceType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, resourceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrantAccess provides a mock function with given fields: _a0
func (_m *ProviderService) GrantAccess(_a0 *domain.Appeal) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Appeal) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeAccess provides a mock function with given fields: _a0
func (_m *ProviderService) RevokeAccess(_a0 *domain.Appeal) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Appeal) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0
func (_m *ProviderService) Update(_a0 *domain.Provider) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Provider) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateAppeal provides a mock function with given fields: _a0, _a1
func (_m *ProviderService) ValidateAppeal(_a0 *domain.Appeal, _a1 *domain.Provider) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Appeal, *domain.Provider) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
