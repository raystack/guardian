// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	grafana "github.com/odpf/guardian/provider/grafana"
	mock "github.com/stretchr/testify/mock"
)

// GrafanaClient is an autogenerated mock type for the GrafanaClient type
type GrafanaClient struct {
	mock.Mock
}

// GetDashboards provides a mock function with given fields: folderId
func (_m *GrafanaClient) GetDashboards(folderId int) ([]*grafana.Dashboard, error) {
	ret := _m.Called(folderId)

	var r0 []*grafana.Dashboard
	if rf, ok := ret.Get(0).(func(int) []*grafana.Dashboard); ok {
		r0 = rf(folderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*grafana.Dashboard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(folderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFolders provides a mock function with given fields:
func (_m *GrafanaClient) GetFolders() ([]*grafana.Folder, error) {
	ret := _m.Called()

	var r0 []*grafana.Folder
	if rf, ok := ret.Get(0).(func() []*grafana.Folder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*grafana.Folder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrantDashboardAccess provides a mock function with given fields: resource, user, role
func (_m *GrafanaClient) GrantDashboardAccess(resource *grafana.Dashboard, user string, role string) error {
	ret := _m.Called(resource, user, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(*grafana.Dashboard, string, string) error); ok {
		r0 = rf(resource, user, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeDashboardAccess provides a mock function with given fields: resource, user, role
func (_m *GrafanaClient) RevokeDashboardAccess(resource *grafana.Dashboard, user string, role string) error {
	ret := _m.Called(resource, user, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(*grafana.Dashboard, string, string) error); ok {
		r0 = rf(resource, user, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
