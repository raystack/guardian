// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	frontier "github.com/raystack/guardian/plugins/providers/frontier"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// GetOrganizations provides a mock function with given fields:
func (_m *Client) GetOrganizations() ([]*frontier.Organization, error) {
	ret := _m.Called()

	var r0 []*frontier.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*frontier.Organization, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*frontier.Organization); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*frontier.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjects provides a mock function with given fields: orgID
func (_m *Client) GetProjects(orgID string) ([]*frontier.Project, error) {
	ret := _m.Called(orgID)

	var r0 []*frontier.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*frontier.Project, error)); ok {
		return rf(orgID)
	}
	if rf, ok := ret.Get(0).(func(string) []*frontier.Project); ok {
		r0 = rf(orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*frontier.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSelfUser provides a mock function with given fields: email
func (_m *Client) GetSelfUser(email string) (*frontier.User, error) {
	ret := _m.Called(email)

	var r0 *frontier.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*frontier.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *frontier.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*frontier.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeams provides a mock function with given fields: orgID
func (_m *Client) GetTeams(orgID string) ([]*frontier.Team, error) {
	ret := _m.Called(orgID)

	var r0 []*frontier.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*frontier.Team, error)); ok {
		return rf(orgID)
	}
	if rf, ok := ret.Get(0).(func(string) []*frontier.Team); ok {
		r0 = rf(orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*frontier.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrantOrganizationAccess provides a mock function with given fields: organization, userId, role
func (_m *Client) GrantOrganizationAccess(organization *frontier.Organization, userId string, role string) error {
	ret := _m.Called(organization, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(*frontier.Organization, string, string) error); ok {
		r0 = rf(organization, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GrantProjectAccess provides a mock function with given fields: project, userId, role
func (_m *Client) GrantProjectAccess(project *frontier.Project, userId string, role string) error {
	ret := _m.Called(project, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(*frontier.Project, string, string) error); ok {
		r0 = rf(project, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GrantTeamAccess provides a mock function with given fields: team, userId, role
func (_m *Client) GrantTeamAccess(team *frontier.Team, userId string, role string) error {
	ret := _m.Called(team, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(*frontier.Team, string, string) error); ok {
		r0 = rf(team, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeOrganizationAccess provides a mock function with given fields: organization, userId, role
func (_m *Client) RevokeOrganizationAccess(organization *frontier.Organization, userId string, role string) error {
	ret := _m.Called(organization, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(*frontier.Organization, string, string) error); ok {
		r0 = rf(organization, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeProjectAccess provides a mock function with given fields: project, userId, role
func (_m *Client) RevokeProjectAccess(project *frontier.Project, userId string, role string) error {
	ret := _m.Called(project, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(*frontier.Project, string, string) error); ok {
		r0 = rf(project, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeTeamAccess provides a mock function with given fields: team, userId, role
func (_m *Client) RevokeTeamAccess(team *frontier.Team, userId string, role string) error {
	ret := _m.Called(team, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(*frontier.Team, string, string) error); ok {
		r0 = rf(team, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
