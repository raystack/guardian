// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/odpf/guardian/domain"
	mock "github.com/stretchr/testify/mock"
)

// ApprovalService is an autogenerated mock type for the ApprovalService type
type ApprovalService struct {
	mock.Mock
}

// AdvanceApproval provides a mock function with given fields: appeal
func (_m *ApprovalService) AdvanceApproval(appeal *domain.Appeal) error {
	ret := _m.Called(appeal)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Appeal) error); ok {
		r0 = rf(appeal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BulkInsert provides a mock function with given fields: _a0
func (_m *ApprovalService) BulkInsert(_a0 []*domain.Approval) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*domain.Approval) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListApprovals provides a mock function with given fields: _a0
func (_m *ApprovalService) ListApprovals(_a0 map[string]interface{}) ([]*domain.Approval, error) {
	ret := _m.Called(_a0)

	var r0 []*domain.Approval
	if rf, ok := ret.Get(0).(func(map[string]interface{}) []*domain.Approval); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Approval)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
