// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/odpf/guardian/domain"
	mock "github.com/stretchr/testify/mock"
)

// AppealService is an autogenerated mock type for the appealService type
type AppealService struct {
	mock.Mock
}

type AppealService_Expecter struct {
	mock *mock.Mock
}

func (_m *AppealService) EXPECT() *AppealService_Expecter {
	return &AppealService_Expecter{mock: &_m.Mock}
}

// Cancel provides a mock function with given fields: _a0, _a1
func (_m *AppealService) Cancel(_a0 context.Context, _a1 string) (*domain.Appeal, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domain.Appeal
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Appeal); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Appeal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppealService_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type AppealService_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 string
func (_e *AppealService_Expecter) Cancel(_a0 interface{}, _a1 interface{}) *AppealService_Cancel_Call {
	return &AppealService_Cancel_Call{Call: _e.mock.On("Cancel", _a0, _a1)}
}

func (_c *AppealService_Cancel_Call) Run(run func(_a0 context.Context, _a1 string)) *AppealService_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AppealService_Cancel_Call) Return(_a0 *domain.Appeal, _a1 error) *AppealService_Cancel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *AppealService) Create(_a0 context.Context, _a1 []*domain.Appeal) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*domain.Appeal) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AppealService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AppealService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 []*domain.Appeal
func (_e *AppealService_Expecter) Create(_a0 interface{}, _a1 interface{}) *AppealService_Create_Call {
	return &AppealService_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *AppealService_Create_Call) Run(run func(_a0 context.Context, _a1 []*domain.Appeal)) *AppealService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*domain.Appeal))
	})
	return _c
}

func (_c *AppealService_Create_Call) Return(_a0 error) *AppealService_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

// Find provides a mock function with given fields: _a0, _a1
func (_m *AppealService) Find(_a0 context.Context, _a1 *domain.ListAppealsFilter) ([]*domain.Appeal, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*domain.Appeal
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ListAppealsFilter) []*domain.Appeal); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Appeal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.ListAppealsFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppealService_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type AppealService_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *domain.ListAppealsFilter
func (_e *AppealService_Expecter) Find(_a0 interface{}, _a1 interface{}) *AppealService_Find_Call {
	return &AppealService_Find_Call{Call: _e.mock.On("Find", _a0, _a1)}
}

func (_c *AppealService_Find_Call) Run(run func(_a0 context.Context, _a1 *domain.ListAppealsFilter)) *AppealService_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.ListAppealsFilter))
	})
	return _c
}

func (_c *AppealService_Find_Call) Return(_a0 []*domain.Appeal, _a1 error) *AppealService_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetByID provides a mock function with given fields: _a0, _a1
func (_m *AppealService) GetByID(_a0 context.Context, _a1 string) (*domain.Appeal, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domain.Appeal
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Appeal); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Appeal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppealService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type AppealService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 string
func (_e *AppealService_Expecter) GetByID(_a0 interface{}, _a1 interface{}) *AppealService_GetByID_Call {
	return &AppealService_GetByID_Call{Call: _e.mock.On("GetByID", _a0, _a1)}
}

func (_c *AppealService_GetByID_Call) Run(run func(_a0 context.Context, _a1 string)) *AppealService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AppealService_GetByID_Call) Return(_a0 *domain.Appeal, _a1 error) *AppealService_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// MakeAction provides a mock function with given fields: _a0, _a1
func (_m *AppealService) MakeAction(_a0 context.Context, _a1 domain.ApprovalAction) (*domain.Appeal, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domain.Appeal
	if rf, ok := ret.Get(0).(func(context.Context, domain.ApprovalAction) *domain.Appeal); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Appeal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.ApprovalAction) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppealService_MakeAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeAction'
type AppealService_MakeAction_Call struct {
	*mock.Call
}

// MakeAction is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 domain.ApprovalAction
func (_e *AppealService_Expecter) MakeAction(_a0 interface{}, _a1 interface{}) *AppealService_MakeAction_Call {
	return &AppealService_MakeAction_Call{Call: _e.mock.On("MakeAction", _a0, _a1)}
}

func (_c *AppealService_MakeAction_Call) Run(run func(_a0 context.Context, _a1 domain.ApprovalAction)) *AppealService_MakeAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ApprovalAction))
	})
	return _c
}

func (_c *AppealService_MakeAction_Call) Return(_a0 *domain.Appeal, _a1 error) *AppealService_MakeAction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Revoke provides a mock function with given fields: ctx, id, actor, reason
func (_m *AppealService) Revoke(ctx context.Context, id string, actor string, reason string) (*domain.Appeal, error) {
	ret := _m.Called(ctx, id, actor, reason)

	var r0 *domain.Appeal
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *domain.Appeal); ok {
		r0 = rf(ctx, id, actor, reason)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Appeal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, id, actor, reason)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppealService_Revoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Revoke'
type AppealService_Revoke_Call struct {
	*mock.Call
}

// Revoke is a helper method to define mock.On call
//  - ctx context.Context
//  - id string
//  - actor string
//  - reason string
func (_e *AppealService_Expecter) Revoke(ctx interface{}, id interface{}, actor interface{}, reason interface{}) *AppealService_Revoke_Call {
	return &AppealService_Revoke_Call{Call: _e.mock.On("Revoke", ctx, id, actor, reason)}
}

func (_c *AppealService_Revoke_Call) Run(run func(ctx context.Context, id string, actor string, reason string)) *AppealService_Revoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AppealService_Revoke_Call) Return(_a0 *domain.Appeal, _a1 error) *AppealService_Revoke_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
