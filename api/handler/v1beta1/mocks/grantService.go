// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grant "github.com/odpf/guardian/core/grant"
	domain "github.com/odpf/guardian/domain"

	mock "github.com/stretchr/testify/mock"
)

// GrantService is an autogenerated mock type for the grantService type
type GrantService struct {
	mock.Mock
}

type GrantService_Expecter struct {
	mock *mock.Mock
}

func (_m *GrantService) EXPECT() *GrantService_Expecter {
	return &GrantService_Expecter{mock: &_m.Mock}
}

// BulkRevoke provides a mock function with given fields: ctx, filter, actor, reason
func (_m *GrantService) BulkRevoke(ctx context.Context, filter domain.RevokeGrantsFilter, actor string, reason string) ([]*domain.Grant, error) {
	ret := _m.Called(ctx, filter, actor, reason)

	var r0 []*domain.Grant
	if rf, ok := ret.Get(0).(func(context.Context, domain.RevokeGrantsFilter, string, string) []*domain.Grant); ok {
		r0 = rf(ctx, filter, actor, reason)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Grant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.RevokeGrantsFilter, string, string) error); ok {
		r1 = rf(ctx, filter, actor, reason)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrantService_BulkRevoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkRevoke'
type GrantService_BulkRevoke_Call struct {
	*mock.Call
}

// BulkRevoke is a helper method to define mock.On call
//  - ctx context.Context
//  - filter domain.RevokeGrantsFilter
//  - actor string
//  - reason string
func (_e *GrantService_Expecter) BulkRevoke(ctx interface{}, filter interface{}, actor interface{}, reason interface{}) *GrantService_BulkRevoke_Call {
	return &GrantService_BulkRevoke_Call{Call: _e.mock.On("BulkRevoke", ctx, filter, actor, reason)}
}

func (_c *GrantService_BulkRevoke_Call) Run(run func(ctx context.Context, filter domain.RevokeGrantsFilter, actor string, reason string)) *GrantService_BulkRevoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.RevokeGrantsFilter), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *GrantService_BulkRevoke_Call) Return(_a0 []*domain.Grant, _a1 error) *GrantService_BulkRevoke_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetByID provides a mock function with given fields: _a0, _a1
func (_m *GrantService) GetByID(_a0 context.Context, _a1 string) (*domain.Grant, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domain.Grant
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Grant); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Grant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrantService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type GrantService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 string
func (_e *GrantService_Expecter) GetByID(_a0 interface{}, _a1 interface{}) *GrantService_GetByID_Call {
	return &GrantService_GetByID_Call{Call: _e.mock.On("GetByID", _a0, _a1)}
}

func (_c *GrantService_GetByID_Call) Run(run func(_a0 context.Context, _a1 string)) *GrantService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GrantService_GetByID_Call) Return(_a0 *domain.Grant, _a1 error) *GrantService_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ImportAccess provides a mock function with given fields: ctx, criteria
func (_m *GrantService) ImportAccess(ctx context.Context, criteria grant.ImportAccessCriteria) ([]*domain.Grant, error) {
	ret := _m.Called(ctx, criteria)

	var r0 []*domain.Grant
	if rf, ok := ret.Get(0).(func(context.Context, grant.ImportAccessCriteria) []*domain.Grant); ok {
		r0 = rf(ctx, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Grant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, grant.ImportAccessCriteria) error); ok {
		r1 = rf(ctx, criteria)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrantService_ImportAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportAccess'
type GrantService_ImportAccess_Call struct {
	*mock.Call
}

// ImportAccess is a helper method to define mock.On call
//  - ctx context.Context
//  - criteria grant.ImportAccessCriteria
func (_e *GrantService_Expecter) ImportAccess(ctx interface{}, criteria interface{}) *GrantService_ImportAccess_Call {
	return &GrantService_ImportAccess_Call{Call: _e.mock.On("ImportAccess", ctx, criteria)}
}

func (_c *GrantService_ImportAccess_Call) Run(run func(ctx context.Context, criteria grant.ImportAccessCriteria)) *GrantService_ImportAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(grant.ImportAccessCriteria))
	})
	return _c
}

func (_c *GrantService_ImportAccess_Call) Return(_a0 []*domain.Grant, _a1 error) *GrantService_ImportAccess_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *GrantService) List(_a0 context.Context, _a1 domain.ListGrantsFilter) ([]domain.Grant, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []domain.Grant
	if rf, ok := ret.Get(0).(func(context.Context, domain.ListGrantsFilter) []domain.Grant); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Grant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.ListGrantsFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrantService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type GrantService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 domain.ListGrantsFilter
func (_e *GrantService_Expecter) List(_a0 interface{}, _a1 interface{}) *GrantService_List_Call {
	return &GrantService_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *GrantService_List_Call) Run(run func(_a0 context.Context, _a1 domain.ListGrantsFilter)) *GrantService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ListGrantsFilter))
	})
	return _c
}

func (_c *GrantService_List_Call) Return(_a0 []domain.Grant, _a1 error) *GrantService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Revoke provides a mock function with given fields: ctx, id, actor, reason, opts
func (_m *GrantService) Revoke(ctx context.Context, id string, actor string, reason string, opts ...grant.Option) (*domain.Grant, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, actor, reason)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *domain.Grant
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...grant.Option) *domain.Grant); ok {
		r0 = rf(ctx, id, actor, reason, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Grant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...grant.Option) error); ok {
		r1 = rf(ctx, id, actor, reason, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrantService_Revoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Revoke'
type GrantService_Revoke_Call struct {
	*mock.Call
}

// Revoke is a helper method to define mock.On call
//  - ctx context.Context
//  - id string
//  - actor string
//  - reason string
//  - opts ...grant.Option
func (_e *GrantService_Expecter) Revoke(ctx interface{}, id interface{}, actor interface{}, reason interface{}, opts ...interface{}) *GrantService_Revoke_Call {
	return &GrantService_Revoke_Call{Call: _e.mock.On("Revoke",
		append([]interface{}{ctx, id, actor, reason}, opts...)...)}
}

func (_c *GrantService_Revoke_Call) Run(run func(ctx context.Context, id string, actor string, reason string, opts ...grant.Option)) *GrantService_Revoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grant.Option, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(grant.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), variadicArgs...)
	})
	return _c
}

func (_c *GrantService_Revoke_Call) Return(_a0 *domain.Grant, _a1 error) *GrantService_Revoke_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
