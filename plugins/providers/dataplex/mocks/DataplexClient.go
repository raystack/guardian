// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	"github.com/raystack/guardian/plugins/providers/dataplex"

	domain "github.com/raystack/guardian/domain"

	mock "github.com/stretchr/testify/mock"
)

// DataplexClient is an autogenerated mock type for the DataplexClient type
type DataplexClient struct {
	mock.Mock
}

type DataplexClient_Expecter struct {
	mock *mock.Mock
}

func (_m *DataplexClient) EXPECT() *DataplexClient_Expecter {
	return &DataplexClient_Expecter{mock: &_m.Mock}
}

func (_m *DataplexClient) GetPolicies(_a0 context.Context) ([]*dataplex.Policy, error) {
	ret := _m.Called(_a0)

	var r0 []*dataplex.Policy
	if rf, ok := ret.Get(0).(func(context.Context) []*dataplex.Policy); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dataplex.Policy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataplexClient_GetPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicies'
type DataplexClient_GetPolicies_Call struct {
	*mock.Call
}

// GetDatasets is a helper method to define mock.On call
//  - _a0 context.Context
func (_e *DataplexClient_Expecter) GetPolicies(_a0 interface{}) *DataplexClient_GetPolicies_Call {
	return &DataplexClient_GetPolicies_Call{Call: _e.mock.On("GetPolicies", _a0)}
}

func (_c *DataplexClient_GetPolicies_Call) Run(run func(_a0 context.Context)) *DataplexClient_GetPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DataplexClient_GetPolicies_Call) Return(_a0 []*dataplex.Policy, _a1 error) *DataplexClient_GetPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_m *DataplexClient) GrantPolicyAccess(ctx context.Context, tag *dataplex.Policy, user, role string) error {
	ret := _m.Called(ctx, tag, user, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataplex.Policy, string, string) error); ok {
		r0 = rf(ctx, tag, user, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataplexClient_GrantPolicyAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantPolicyAccess'
type DataplexClient_GrantPolicyAccess_Call struct {
	*mock.Call
}

// GrantPolicyAccess is a helper method to define mock.On call
//  - ctx context.Context
//  - t *bigquery.Table
//  - accountType string
//  - accountID string
//  - role string
func (_e *DataplexClient_Expecter) GrantPolicyAccess(ctx context.Context,  tag *dataplex.Policy, user, role string) *DataplexClient_GrantPolicyAccess_Call {
	return &DataplexClient_GrantPolicyAccess_Call{Call: _e.mock.On("GrantTableAccess", ctx, tag, user, role)}
}

// ListAccess provides a mock function with given fields: ctx, resources
func (_m *DataplexClient) ListAccess(ctx context.Context, resources []*domain.Resource) (domain.MapResourceAccess, error) {
	ret := _m.Called(ctx, resources)

	var r0 domain.MapResourceAccess
	if rf, ok := ret.Get(0).(func(context.Context, []*domain.Resource) domain.MapResourceAccess); ok {
		r0 = rf(ctx, resources)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.MapResourceAccess)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []*domain.Resource) error); ok {
		r1 = rf(ctx, resources)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataplexClient_ListAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccess'
type DataplexClient_ListAccess_Call struct {
	*mock.Call
}

// ListAccess is a helper method to define mock.On call
//  - ctx context.Context
//  - resources []*domain.Resource
func (_e *DataplexClient_Expecter) ListAccess(ctx interface{}, resources interface{}) *DataplexClient_ListAccess_Call {
	return &DataplexClient_ListAccess_Call{Call: _e.mock.On("ListAccess", ctx, resources)}
}

func (_c *DataplexClient_ListAccess_Call) Run(run func(ctx context.Context, resources []*domain.Resource)) *DataplexClient_ListAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*domain.Resource))
	})
	return _c
}

func (_c *DataplexClient_ListAccess_Call) Return(_a0 domain.MapResourceAccess, _a1 error) *DataplexClient_ListAccess_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataplexClient_GrantPolicyAccess_Call) Run(run func(ctx context.Context,tag *dataplex.Policy, user, role string)) *DataplexClient_GrantPolicyAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dataplex.Policy), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *DataplexClient_GrantPolicyAccess_Call) Return(_a0 error) *DataplexClient_GrantPolicyAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_m *DataplexClient) RevokePolicyAccess(ctx context.Context, tag *dataplex.Policy, user, role string) error {
	ret := _m.Called(ctx, tag, user, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataplex.Policy, string, string) error); ok {
		r0 = rf(ctx, tag, user, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}