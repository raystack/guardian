// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/odpf/guardian/domain"

	mock "github.com/stretchr/testify/mock"
)

// iamManager is an autogenerated mock type for the iamManager type
type IamManager struct {
	mock.Mock
}

// GetClient provides a mock function with given fields: _a0
func (_m *IamManager) GetClient(_a0 domain.SensitiveConfig) (domain.IAMClient, error) {
	ret := _m.Called(_a0)

	var r0 domain.IAMClient
	if rf, ok := ret.Get(0).(func(domain.SensitiveConfig) domain.IAMClient); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.IAMClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.SensitiveConfig) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseConfig provides a mock function with given fields: _a0
func (_m *IamManager) ParseConfig(_a0 *domain.IAMConfig) (domain.SensitiveConfig, error) {
	ret := _m.Called(_a0)

	var r0 domain.SensitiveConfig
	if rf, ok := ret.Get(0).(func(*domain.IAMConfig) domain.SensitiveConfig); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.SensitiveConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.IAMConfig) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
