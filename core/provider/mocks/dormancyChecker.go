// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/raystack/guardian/domain"
	mock "github.com/stretchr/testify/mock"
)

// DormancyChecker is an autogenerated mock type for the dormancyChecker type
type DormancyChecker struct {
	mock.Mock
}

type DormancyChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *DormancyChecker) EXPECT() *DormancyChecker_Expecter {
	return &DormancyChecker_Expecter{mock: &_m.Mock}
}

// CorrelateGrantActivities provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *DormancyChecker) CorrelateGrantActivities(_a0 context.Context, _a1 domain.Provider, _a2 []*domain.Grant, _a3 []*domain.Activity) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Provider, []*domain.Grant, []*domain.Activity) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DormancyChecker_CorrelateGrantActivities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CorrelateGrantActivities'
type DormancyChecker_CorrelateGrantActivities_Call struct {
	*mock.Call
}

// CorrelateGrantActivities is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 domain.Provider
//   - _a2 []*domain.Grant
//   - _a3 []*domain.Activity
func (_e *DormancyChecker_Expecter) CorrelateGrantActivities(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *DormancyChecker_CorrelateGrantActivities_Call {
	return &DormancyChecker_CorrelateGrantActivities_Call{Call: _e.mock.On("CorrelateGrantActivities", _a0, _a1, _a2, _a3)}
}

func (_c *DormancyChecker_CorrelateGrantActivities_Call) Run(run func(_a0 context.Context, _a1 domain.Provider, _a2 []*domain.Grant, _a3 []*domain.Activity)) *DormancyChecker_CorrelateGrantActivities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Provider), args[2].([]*domain.Grant), args[3].([]*domain.Activity))
	})
	return _c
}

func (_c *DormancyChecker_CorrelateGrantActivities_Call) Return(_a0 error) *DormancyChecker_CorrelateGrantActivities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DormancyChecker_CorrelateGrantActivities_Call) RunAndReturn(run func(context.Context, domain.Provider, []*domain.Grant, []*domain.Activity) error) *DormancyChecker_CorrelateGrantActivities_Call {
	_c.Call.Return(run)
	return _c
}

// ListActivities provides a mock function with given fields: _a0, _a1, _a2
func (_m *DormancyChecker) ListActivities(_a0 context.Context, _a1 domain.Provider, _a2 domain.ListActivitiesFilter) ([]*domain.Activity, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*domain.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Provider, domain.ListActivitiesFilter) ([]*domain.Activity, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Provider, domain.ListActivitiesFilter) []*domain.Activity); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Provider, domain.ListActivitiesFilter) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DormancyChecker_ListActivities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListActivities'
type DormancyChecker_ListActivities_Call struct {
	*mock.Call
}

// ListActivities is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 domain.Provider
//   - _a2 domain.ListActivitiesFilter
func (_e *DormancyChecker_Expecter) ListActivities(_a0 interface{}, _a1 interface{}, _a2 interface{}) *DormancyChecker_ListActivities_Call {
	return &DormancyChecker_ListActivities_Call{Call: _e.mock.On("ListActivities", _a0, _a1, _a2)}
}

func (_c *DormancyChecker_ListActivities_Call) Run(run func(_a0 context.Context, _a1 domain.Provider, _a2 domain.ListActivitiesFilter)) *DormancyChecker_ListActivities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Provider), args[2].(domain.ListActivitiesFilter))
	})
	return _c
}

func (_c *DormancyChecker_ListActivities_Call) Return(_a0 []*domain.Activity, _a1 error) *DormancyChecker_ListActivities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DormancyChecker_ListActivities_Call) RunAndReturn(run func(context.Context, domain.Provider, domain.ListActivitiesFilter) ([]*domain.Activity, error)) *DormancyChecker_ListActivities_Call {
	_c.Call.Return(run)
	return _c
}

// NewDormancyChecker creates a new instance of DormancyChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDormancyChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *DormancyChecker {
	mock := &DormancyChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
