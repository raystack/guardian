// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	access "github.com/odpf/guardian/core/access"

	context "context"

	domain "github.com/odpf/guardian/domain"

	mock "github.com/stretchr/testify/mock"
)

// AccessService is an autogenerated mock type for the accessService type
type AccessService struct {
	mock.Mock
}

type AccessService_Expecter struct {
	mock *mock.Mock
}

func (_m *AccessService) EXPECT() *AccessService_Expecter {
	return &AccessService_Expecter{mock: &_m.Mock}
}

// List provides a mock function with given fields: _a0, _a1
func (_m *AccessService) List(_a0 context.Context, _a1 domain.ListAccessesFilter) ([]domain.Access, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []domain.Access
	if rf, ok := ret.Get(0).(func(context.Context, domain.ListAccessesFilter) []domain.Access); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Access)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.ListAccessesFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccessService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type AccessService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 domain.ListAccessesFilter
func (_e *AccessService_Expecter) List(_a0 interface{}, _a1 interface{}) *AccessService_List_Call {
	return &AccessService_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *AccessService_List_Call) Run(run func(_a0 context.Context, _a1 domain.ListAccessesFilter)) *AccessService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ListAccessesFilter))
	})
	return _c
}

func (_c *AccessService_List_Call) Return(_a0 []domain.Access, _a1 error) *AccessService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Prepare provides a mock function with given fields: _a0, _a1
func (_m *AccessService) Prepare(_a0 context.Context, _a1 domain.Appeal) (*domain.Access, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domain.Access
	if rf, ok := ret.Get(0).(func(context.Context, domain.Appeal) *domain.Access); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Access)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Appeal) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccessService_Prepare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prepare'
type AccessService_Prepare_Call struct {
	*mock.Call
}

// Prepare is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 domain.Appeal
func (_e *AccessService_Expecter) Prepare(_a0 interface{}, _a1 interface{}) *AccessService_Prepare_Call {
	return &AccessService_Prepare_Call{Call: _e.mock.On("Prepare", _a0, _a1)}
}

func (_c *AccessService_Prepare_Call) Run(run func(_a0 context.Context, _a1 domain.Appeal)) *AccessService_Prepare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Appeal))
	})
	return _c
}

func (_c *AccessService_Prepare_Call) Return(_a0 *domain.Access, _a1 error) *AccessService_Prepare_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Revoke provides a mock function with given fields: ctx, id, actor, reason, opts
func (_m *AccessService) Revoke(ctx context.Context, id string, actor string, reason string, opts ...access.Option) (*domain.Access, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, actor, reason)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *domain.Access
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...access.Option) *domain.Access); ok {
		r0 = rf(ctx, id, actor, reason, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Access)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...access.Option) error); ok {
		r1 = rf(ctx, id, actor, reason, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccessService_Revoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Revoke'
type AccessService_Revoke_Call struct {
	*mock.Call
}

// Revoke is a helper method to define mock.On call
//  - ctx context.Context
//  - id string
//  - actor string
//  - reason string
//  - opts ...access.Option
func (_e *AccessService_Expecter) Revoke(ctx interface{}, id interface{}, actor interface{}, reason interface{}, opts ...interface{}) *AccessService_Revoke_Call {
	return &AccessService_Revoke_Call{Call: _e.mock.On("Revoke",
		append([]interface{}{ctx, id, actor, reason}, opts...)...)}
}

func (_c *AccessService_Revoke_Call) Run(run func(ctx context.Context, id string, actor string, reason string, opts ...access.Option)) *AccessService_Revoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access.Option, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(access.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), variadicArgs...)
	})
	return _c
}

func (_c *AccessService_Revoke_Call) Return(_a0 *domain.Access, _a1 error) *AccessService_Revoke_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
